/** 
* NO TOCAR ESTE ARCHIVO: Es generado automaticamente, si sabes lo que haces adelante ;)
* de lo contrario mejor ir a la documentacion o al servidor de discord link.codigoencasa.com/DISCORD
*/
'use strict';

var require$$0 = require('path');
var require$$1 = require('fs');
const fs = require('fs');
const multer = require('multer');
var require$$2 = require('kleur');
var require$$3 = require('polka');
var require$$4 = require('serve-static');
const bodyParser = require('body-parser');

const { join } = require$$0;
const { createReadStream, existsSync } = require$$1;
const { bgYellow, cyan, yellow } = require$$2;
const polka = require$$3;
const upload = multer(); // Crea una instancia de multer

const HTTP_PORT = process.env.PORT || 3000;
const QR_FILE = process.env.QR_FILE ?? 'bot';
const PUBLIC_URL = process.env.PUBLIC_URL ?? process.env.RAILWAY_STATIC_URL ?? 'http://localhost';

const dir = [join(__dirname, 'dist'), join(__dirname, '..', 'dist')].find((i) => existsSync(i));
const serve = require$$4(dir);

/**
 * Iniciamos Portal WEB para escanear QR
 * @param {port:3000, publicSite:'http://mistio.com', qrFile:'qr.png', dir:__dirname}
 */
const start = (args) => {
    const injectArgs = {
        port: HTTP_PORT,
        publicSite: PUBLIC_URL,
        name: QR_FILE,
        ...args,
    };
    const { port, publicSite, name } = injectArgs;
    var contador = 0;
    const banner = () => {
        console.log(``);
        console.log(bgYellow(`🚩 ESCANEAR QR 🚩`));
        console.log(cyan(`Existen varias maneras de escanear el QR code`));
        console.log(cyan(`- Tambien puedes visitar `), yellow(`${publicSite}:${port}`));
        console.log(cyan(`- Se ha creado un archivo que finaliza `), yellow('qr.png'));
        console.log(``);
    };

    polka()
        .use(serve)
        .use(bodyParser.json())
        .use(upload.any())
        .get('qr.png', (_, res) => {
            const qrSource = [
                join(process.cwd(), `${name}.qr.png`),
                join(__dirname, '..', `${name}.qr.png`),
                join(__dirname, `${name}.qr.png`),
            ].find((i) => existsSync(i));

            const qrMark = [
                join(__dirname, 'dist', 'water-mark.png'),
                join(__dirname, '..', 'dist', 'water-mark.png'),
            ].find((i) => existsSync(i));
            const fileStream = createReadStream(qrSource ?? qrMark);

            res.writeHead(200, { 'Content-Type': 'image/png' });
            fileStream.pipe(res);
        })
        .get('/panel', (req, res) => {
            // Lógica para manejar la nueva ruta '/mi-ruta'
            var rutaHtml = join(__dirname,'..', 'dist',"panel.html")
            const fileStream = createReadStream(rutaHtml);

            // res.writeHead(200, { 'Content-Type': 'image/png' });
            fileStream.pipe(res);
            // fileStream.pipe(rutaHtml);
            // res.end('¡Bienvenido a /mi-ruta! \n' + rutaHtml);
        })
        .get('/mensaje', (req, res) => {
            // Lógica para manejar la nueva ruta '/mi-ruta'
            var rutaHtml = join(__dirname,'..', 'dist',"mensaje.html")
            const fileStream = createReadStream(rutaHtml);

            // res.writeHead(200, { 'Content-Type': 'image/png' });
            fileStream.pipe(res);
            // fileStream.pipe(rutaHtml);
            // res.end('¡Bienvenido a /mi-ruta! \n' + rutaHtml);
        })
        .get('/send-mensaje', (req, res) => {
            // Lógica para manejar la nueva ruta '/mi-ruta'
            var rutaHtml = join(__dirname,'..', 'dist',"send-mensaje.html")
            const fileStream = createReadStream(rutaHtml);

            // res.writeHead(200, { 'Content-Type': 'image/png' });
            fileStream.pipe(res);
            // fileStream.pipe(rutaHtml);
            // res.end('¡Bienvenido a /mi-ruta! \n' + rutaHtml);
        })
        .get('/reporte', (req, res) => {
            // Lógica para manejar la nueva ruta '/mi-ruta'
            var rutaHtml = join(__dirname,'..', 'dist',"reporte.html")
            const fileStream = createReadStream(rutaHtml);

            // res.writeHead(200, { 'Content-Type': 'image/png' });
            fileStream.pipe(res);
            // fileStream.pipe(rutaHtml);
            // res.end('¡Bienvenido a /mi-ruta! \n' + rutaHtml);
        })
        .post('/guardar-json', async (req, res) => {
            try {
                const datos = req.body; // Los datos enviados desde el cliente
                const rutaDestino = join(__dirname, '..', 'dist', 'Datos.json');
                const contenidoJSON = JSON.stringify(datos, null, 2);
                // await fs.writeFile(rutaDestino, contenidoJSON);
                await fs.promises.writeFile(rutaDestino, contenidoJSON);

                // Enviar una respuesta de éxito con el código 200 y JSON
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ mensaje: 'Archivo JSON guardado con éxito.' }));
              } catch (error) {
                console.error(error);
            
                // Enviar una respuesta de error con el código 500 y JSON
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ mensaje: 'Error al guardar el archivo JSON.' }));
              }
          })
          .post('/guardar-mensaje', async (req, res) => {
            try {
              let rutaDestino = ''; // Inicializa la variable de la ruta del archivo
              const archivo = req.files[0]; // Obtén el archivo de la solicitud
      
              if (archivo) {
                  // Si se proporciona un archivo, guarda el archivo en el sistema de archivos
                  rutaDestino = join(__dirname, '..', 'dist', archivo.originalname);
                  await fs.promises.writeFile(rutaDestino, archivo.buffer);
              }
      
              // Construye el objeto de datos a partir de los datos del cuerpo de la solicitud y la ruta del archivo
              const datos = {
                  mensaje: req.body.mensaje,
                  rutaArchivo: rutaDestino, // Adiciona la propiedad rutaDestino a los datos
              };
      
              const rutaMensaje = join(__dirname, '..', 'dist', 'Mensaje.json');
              const contenidoJSON = JSON.stringify(datos, null, 2);
      
              // Escribe los datos en el archivo JSON
              await fs.promises.writeFile(rutaMensaje, contenidoJSON);

                // Enviar una respuesta de éxito con el código 200 y JSON
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ mensaje: 'Archivo y Guardado con éxito.' }));
              } catch (error) {
                console.error(error);
            
                // Enviar una respuesta de error con el código 500 y JSON
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ mensaje: 'Error al guardar el archivo.' }));
              }
          })
          .post('/envia-mensaje', async (req, res) => {
            try {
                const datos = req.body; // Los datos enviados desde el cliente
                const rutaDestino = `Envios\\mensaje${contador}.json`;
                const dataMensaje = join(__dirname, '..', 'dist', 'Mensaje.json');
                contador++
                // console.log(rutaDestino)
                // Leer el archivo JSON de manera asíncrona
                await fs.promises.readFile(dataMensaje, 'utf-8')
                    .then((contenido) => {
                        const dataMensaje = JSON.parse(contenido);
                        dataMensaje.numero = datos.numero;
                        dataMensaje.nombre = datos.nombre;
                        const contenidoJSON = JSON.stringify(dataMensaje, null, 2);
        
                        // Escribir el archivo con un retraso de 2 segundos (2000 milisegundos)
                            fs.promises.writeFile(rutaDestino, contenidoJSON)
                                .then(() => {
                                    // Enviar una respuesta de éxito con el código 200 y JSON
                                    res.writeHead(200, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify({ mensaje: 'Archivo JSON guardado con éxito.' }));
                                })
                                .catch((error) => {
                                    console.error('Error al guardar el archivo JSON:', error);
                                    // Enviar una respuesta de error con el código 500 y JSON
                                    res.writeHead(500, { 'Content-Type': 'application/json' });
                                    res.end(JSON.stringify({ mensaje: 'Error al guardar el archivo JSON.' }));
                                });
                    })
                    .catch((error) => {
                        console.error('Error al leer el archivo JSON:', error.message);
                        // Enviar una respuesta de error con el código 500 y JSON
                        res.writeHead(500, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ mensaje: 'Error al leer el archivo JSON.' }));
                    });
            } catch (error) {
                console.error(error);
                // Enviar una respuesta de error con el código 500 y JSON
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ mensaje: 'Error al procesar la solicitud.' }));
            }
        })
        .post('/reporte-mensajes', async (req, res) => {
            try {
                const rutaDestino = `Reportes\\Reporte.json`;
                
                // Verificar si el archivo existe
                if (fs.existsSync(rutaDestino)) {
                    // Si existe, leer su contenido y enviarlo como respuesta
                    const contenidoArchivo = fs.readFileSync(rutaDestino, 'utf-8');
                    const datos = JSON.parse(contenidoArchivo);
                    // console.log(datos)
                    res.setHeader('Content-Type', 'application/json');
                    res.end(JSON.stringify(datos));
                } else {
                    // Si el archivo no existe, enviar un mensaje de error
                    res.statusCode = 404;
                    res.end('El archivo de reporte no existe.');
                }
            } catch (error) {
                // En caso de error, enviar un mensaje de error
                console.error('Error al procesar la solicitud:', error);
                res.statusCode = 500;
                res.end('Error interno del servidor.');
            }
        })
        .listen(port, () => banner());
};

var portal_http = start;

module.exports = portal_http;
